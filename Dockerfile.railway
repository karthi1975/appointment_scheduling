# Railway.app Dockerfile for Medical Appointment Booking System
# This Dockerfile creates a production-ready container with webapp and n8n

FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    postgresql-client \
    curl \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY webapp/package*.json ./webapp/

# Install dependencies
RUN npm ci --only=production && \
    cd webapp && npm ci --only=production

# Copy source code
COPY . .

# Build webapp
RUN cd webapp && npm run build

# Production stage
FROM node:18-alpine AS production

# Install production dependencies
RUN apk add --no-cache \
    postgresql-client \
    curl \
    && rm -rf /var/cache/apk/*

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy built application
COPY --from=base --chown=nodejs:nodejs /app/webapp ./webapp
COPY --from=base --chown=nodejs:nodejs /app/package*.json ./
COPY --from=base --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=base --chown=nodejs:nodejs /app/webapp/node_modules ./webapp/node_modules

# Copy n8n workflows and configuration
COPY --from=base --chown=nodejs:nodejs /app/n8n ./n8n
COPY --from=base --chown=nodejs:nodejs /app/railway.json ./

# Create necessary directories
RUN mkdir -p /app/data /app/logs && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose ports
EXPOSE 3000 5678

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start the application
CMD ["npm", "start"] 